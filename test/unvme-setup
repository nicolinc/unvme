#!/bin/bash
# Set up and bind NVME device to use with vfio driver.

PROG=$(basename "$0")

USAGE="Usage:
    ${PROG}                 # enable all SSDs for UNVMe
    ${PROG} [BB:DD.F]...    # enable specific PCI SSD for UNVMe
    ${PROG} reset           # reset all SSDs to inbox NVMe driver
    ${PROG} show            # show all SSD driver info"

trap 'exit 1' TERM
export EXIT_PID=$$


#
# function: print usage and exit
#
myusage() {
    echo -e "${USAGE}"
    exit 1
}

#
# function: print error and exit
#
myerror() {
    echo "ERROR: $*"
    kill -s TERM ${EXIT_PID}
    exit 1
}

# 
# function: echo and execute command, and exit on error
#
mycmd() {
    #echo -e "$(date +%T)> $*"
    eval $*
    if [ $? -ne 0 ]; then myerror "EXIT"; fi
}

# 
# function: check for VFIO support.
#
vfio_check() {
    if [ -z "$(ls /sys/kernel/iommu_groups)" ]; then
        echo "/sys/kernel/iommu_groups is empty"
        echo "ERROR: UNVMe requires VFIO, IOMMU, and VT-d enabled"
        exit 1
    fi
}

# 
# function: bind a specified PCI device to VFIO driver
#
vfio_bind() {
    if [ -e /sys/bus/pci/devices/$1/driver/unbind ]; then
        mycmd "echo $1 > /sys/bus/pci/devices/$1/driver/unbind"
    fi
    mycmd "echo $(lspci -mns $1 | cut -d' ' -f3,4) > /sys/bus/pci/drivers/vfio-pci/new_id"
}

# 
# function: unbind a specified PCI device from VFIO driver
#
vfio_unbind() {
    if [ -h /sys/bus/pci/drivers/vfio-pci/$1 ]; then
        mycmd "echo $1 > /sys/bus/pci/drivers/vfio-pci/unbind"
    fi
}

# 
# function: unbind all SSD devices from VFIO driver
#
vfio_unbind_all() {
    for d in $(lspci -Dn | grep '0108: ' | cut -d" " -f1); do
        vfio_unbind $d
    done
}

# 
# function: print binding status of the PCI argument list
#
print_map() {
    for d in $(lspci -Dn | grep '0108: ' | cut -d" " -f1); do
        m=$(find /sys/bus/pci/drivers -name $d -print)
        m=${m::-13}
        case $m in 
        */nvme)
            m="mapped to $(ls /sys/bus/pci/devices/$d/nvme)"
            ;;

        */vfio-pci)
            m='enabled for UNVMe'
            ;;

        esac

        d="$(echo $d | sed 's/^0000://')"
        echo "$d $(lspci -vs $d | sed '/Subsystem:/!d;s/.*: //') - ($m)"
    done
}

#
# Start here.
#
SSDLIST=$(lspci -Dn | grep '0108: ' | cut -d" " -f1)
if [ -z "${SSDLIST}" ]; then
    echo "No SSD found in system"
    exit 1
fi

if [ $# -eq 0 ]; then
    echo -e "# Setup all SSD devices for UNVMe driver"
    vfio_check
    for d in ${SSDLIST}; do
        vfio_bind $d
    done
    print_map

elif [ "$1" == "reset" ]; then
    echo -e "# Reset all SSD devices to kernel NVMe driver"
    vfio_unbind_all
    mycmd "modprobe -r nvme"
    mycmd "modprobe nvme"
    sleep 3
    print_map

elif [ "$1" == "show" ]; then
    print_map

else
    vfio_check
    for i in $*; do
        case $i in
        [0-9][0-9][0-9][0-9]:*)
            if [ -z "$(lspci -n | grep $i\ 0108\:)" ]; then
                echo -e "No SSD found at PCI $i"
                myusage
                exit
            fi
            ;;

        *)
            myusage
            ;;
        esac
    done

    echo -e "# Setup specified SSD device(s) for UNVMe driver"
    for i in $*; do
        vfio_bind $i
    done
    print_map
fi

